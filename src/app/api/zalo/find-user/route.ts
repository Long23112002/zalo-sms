import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/db/mongodb';
import ZaloConfig from '@/models/ZaloConfig';

// Function ƒë·ªÉ convert cookie t·ª´ database v·ªÅ format m√† zca-js-16 c·∫ßn
function convertCookieForZca(cookieFromDB: any): any {
  try {
    if (!cookieFromDB) return '';
    
    // N·∫øu cookie ƒë√£ l√† array, ki·ªÉm tra format v√† convert n·∫øu c·∫ßn
    if (Array.isArray(cookieFromDB)) {
      console.log(`üç™ Cookie t·ª´ DB l√† array, length: ${cookieFromDB.length}`);
      
      // Ki·ªÉm tra n·∫øu cookie c√≥ format QR login (c√≥ key, value)
      if (cookieFromDB.length > 0 && cookieFromDB[0].key && cookieFromDB[0].value) {
        console.log(`üîÑ Converting QR login cookie format to web login format...`);
        
        // Convert t·ª´ QR format sang web format
        const convertedCookies = cookieFromDB.map(cookie => ({
          domain: cookie.domain || '.zalo.me',
          expirationDate: cookie.maxAge ? (Date.now() / 1000) + cookie.maxAge : null,
          hostOnly: cookie.hostOnly || false,
          httpOnly: cookie.httpOnly || false,
          name: cookie.key || cookie.name,
          path: cookie.path || '/',
          sameSite: cookie.sameSite || null,
          secure: cookie.secure || true,
          session: !cookie.maxAge,
          storeId: null,
          value: cookie.value
        }));
        
        console.log(`‚úÖ Converted ${convertedCookies.length} cookies to web format`);
        return convertedCookies;
      }
      
      // N·∫øu ƒë√£ l√† web format, tr·∫£ v·ªÅ nguy√™n
      if (cookieFromDB.length > 0 && cookieFromDB[0].name && cookieFromDB[0].value) {
        console.log(`üç™ Cookie ƒë√£ ·ªü web format, length: ${cookieFromDB.length}`);
        return cookieFromDB;
      }
      
      return cookieFromDB;
    }
    
    // N·∫øu cookie l√† string, th·ª≠ parse JSON
    if (typeof cookieFromDB === 'string') {
      if (cookieFromDB.trim().startsWith('[')) {
        try {
          const parsed = JSON.parse(cookieFromDB);
          if (Array.isArray(parsed)) {
            console.log(`üç™ Cookie string ƒë√£ ƒë∆∞·ª£c parse th√†nh array, length: ${parsed.length}`);
            // Recursive call ƒë·ªÉ convert format
            return convertCookieForZca(parsed);
          }
        } catch (e) {
          console.log('Kh√¥ng th·ªÉ parse cookie string:', e);
        }
      }
      // N·∫øu kh√¥ng ph·∫£i JSON array, tr·∫£ v·ªÅ string g·ªëc
      console.log(`üç™ Cookie t·ª´ DB l√† string, length: ${cookieFromDB.length}`);
      return cookieFromDB;
    }
    
    // N·∫øu cookie l√† object, ki·ªÉm tra c√≥ cookies array kh√¥ng
    if (cookieFromDB && typeof cookieFromDB === 'object') {
      if (cookieFromDB.cookies && Array.isArray(cookieFromDB.cookies)) {
        console.log(`üç™ Cookie object c√≥ cookies array, length: ${cookieFromDB.cookies.length}`);
        // Recursive call ƒë·ªÉ convert format
        return convertCookieForZca(cookieFromDB.cookies);
      }
      // N·∫øu kh√¥ng c√≥ cookies array, tr·∫£ v·ªÅ object g·ªëc
      console.log(`üç™ Cookie t·ª´ DB l√† object, keys: ${Object.keys(cookieFromDB).join(', ')}`);
      return cookieFromDB;
    }
    
    console.log(`üç™ Cookie t·ª´ DB c√≥ type kh√¥ng x√°c ƒë·ªãnh: ${typeof cookieFromDB}`);
    return cookieFromDB;
  } catch (error) {
    console.error('Error converting cookie:', error);
    return cookieFromDB;
  }
}

export async function POST(request: NextRequest) {
  let phoneNumber: string = '';
  
  try {
    const { userId, configId, phoneNumber: reqPhoneNumber } = await request.json();
    phoneNumber = reqPhoneNumber;

    if (!phoneNumber) {
      return NextResponse.json(
        { error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: phoneNumber' },
        { status: 400 }
      );
    }

    if (!userId && !configId) {
      return NextResponse.json(
        { error: 'Thi·∫øu th√¥ng tin: c·∫ßn userId ho·∫∑c configId' },
        { status: 400 }
      );
    }

    // K·∫øt n·ªëi database
    await connectDB();

    // T√¨m Zalo config
    const zaloConfig = await ZaloConfig.findById(configId);
    if (!zaloConfig) {
      return NextResponse.json(
        { 
          error: 'Kh√¥ng t√¨m th·∫•y Zalo config. Vui l√≤ng login QR tr∆∞·ªõc.',
          details: 'Ch∆∞a c√≥ cookie ho·∫∑c config ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
        },
        { status: 404 }
      );
    }

    // Ki·ªÉm tra n·∫øu l√† temp config (cookie r·ªóng)
    if (!zaloConfig.cookie || 
        (typeof zaloConfig.cookie === 'string' && zaloConfig.cookie.trim() === '') ||
        (Array.isArray(zaloConfig.cookie) && zaloConfig.cookie.length === 0) ||
        (typeof zaloConfig.cookie === 'object' && Object.keys(zaloConfig.cookie).length === 0)) {
      return NextResponse.json(
        { 
          error: 'Config ch∆∞a c√≥ cookie h·ª£p l·ªá. Vui l√≤ng login QR tr∆∞·ªõc.',
          details: 'Cookie r·ªóng ho·∫∑c ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p',
          solution: 'G·ªçi API /api/zalo/login-qr ƒë·ªÉ l·∫•y cookie m·ªõi'
        },
        { status: 400 }
      );
    }

    console.log(`üîç S·ª≠ d·ª•ng Zalo config: ${zaloConfig.name} (ID: ${zaloConfig._id})`);
    console.log(`üç™ Cookie length: ${zaloConfig.cookie?.length || 0} characters`);
    console.log(`üì± IMEI: ${zaloConfig.imei}`);
    console.log(`üåê User Agent: ${zaloConfig.userAgent}`);
    console.log(`üìû T√¨m ki·∫øm s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber}`);

    // S·ª≠ d·ª•ng dynamic import ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ v·ªõi sharp tr√™n Windows
    let Zalo;
    try {
      const zcaModule = await import('zca-js-16');
      Zalo = zcaModule.Zalo;
    } catch (importError) {
      console.error('Failed to import zca-js-16:', importError);
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ load th∆∞ vi·ªán Zalo. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t.' },
        { status: 500 }
      );
    }

    // T·∫°o instance Zalo v·ªõi credentials ƒë√£ c√≥
    const convertedCookie = convertCookieForZca(zaloConfig.cookie);
    
    // Validate convertedCookie
    if (!convertedCookie || 
        (Array.isArray(convertedCookie) && convertedCookie.length === 0) ||
        (typeof convertedCookie === 'string' && convertedCookie.trim() === '')) {
      return NextResponse.json(
        { 
          error: 'Cookie kh√¥ng h·ª£p l·ªá sau khi convert. Vui l√≤ng login QR l·∫°i.',
          details: 'Converted cookie is empty or invalid',
          solution: 'G·ªçi l·∫°i API /api/zalo/login-qr ƒë·ªÉ l·∫•y cookie m·ªõi'
        },
        { status: 400 }
      );
    }
    
    console.log(`üîç Debug Zalo constructor parameters:`);
    console.log(`   - Zalo class: ${typeof Zalo}`);
    console.log(`   - convertedCookie:`, convertedCookie);
    console.log(`   - imei: ${zaloConfig.imei}`);
    console.log(`   - userAgent: ${zaloConfig.userAgent}`);
    
    // Th·ª≠ t·∫°o Zalo instance v·ªõi c√°c format kh√°c nhau
    let zalo;
    let constructorSuccess = false;
    
    // Th·ª≠ format 1: convertedCookie (web format)
    try {
      console.log(`üîÑ Th·ª≠ t·∫°o Zalo instance v·ªõi convertedCookie...`);
      zalo = new Zalo({
        cookie: convertedCookie,
        imei: zaloConfig.imei,
        userAgent: zaloConfig.userAgent
      });
      console.log(`‚úÖ Zalo instance created successfully v·ªõi convertedCookie`);
      constructorSuccess = true;
    } catch (error1: any) {
      console.log(`‚ùå Format 1 failed:`, error1.message);
      
      // Th·ª≠ format 2: cookie string ƒë∆°n gi·∫£n
      try {
        console.log(`üîÑ Th·ª≠ t·∫°o Zalo instance v·ªõi cookie string...`);
        const cookieString = convertedCookie.map((c: any) => `${c.name}=${c.value}`).join('; ');
        console.log(`üç™ Cookie string: ${cookieString}`);
        
        zalo = new Zalo({
          cookie: cookieString,
          imei: zaloConfig.imei,
          userAgent: zaloConfig.userAgent
        });
        console.log(`‚úÖ Zalo instance created successfully v·ªõi cookie string`);
        constructorSuccess = true;
      } catch (error2: any) {
        console.log(`‚ùå Format 2 failed:`, error2.message);
        
        // Th·ª≠ format 3: cookie g·ªëc t·ª´ database
        try {
          console.log(`üîÑ Th·ª≠ t·∫°o Zalo instance v·ªõi cookie g·ªëc...`);
          zalo = new Zalo({
            cookie: zaloConfig.cookie,
            imei: zaloConfig.imei,
            userAgent: zaloConfig.userAgent
          });
          console.log(`‚úÖ Zalo instance created successfully v·ªõi cookie g·ªëc`);
          constructorSuccess = true;
        } catch (error3: any) {
          console.log(`‚ùå Format 3 failed:`, error3.message);
          
          return NextResponse.json(
            { 
              error: 'Kh√¥ng th·ªÉ t·∫°o Zalo instance v·ªõi b·∫•t k·ª≥ format cookie n√†o.',
              details: `Format 1: ${error1.message}, Format 2: ${error2.message}, Format 3: ${error3.message}`,
              solution: 'Vui l√≤ng ki·ªÉm tra th√¥ng tin config ho·∫∑c login QR l·∫°i'
            },
            { status: 500 }
          );
        }
      }
    }
    
    if (!constructorSuccess) {
      return NextResponse.json(
        { 
          error: 'Kh√¥ng th·ªÉ t·∫°o Zalo instance. Vui l√≤ng ki·ªÉm tra th√¥ng tin config.',
          details: 'All cookie formats failed',
          solution: 'Ki·ªÉm tra IMEI, User Agent v√† Cookie format'
        },
        { status: 500 }
      );
    }

    console.log(`üöÄ Kh·ªüi t·∫°o Zalo instance v·ªõi config c√≥ s·∫µn`);
    console.log(`üç™ Cookie type: ${typeof zaloConfig.cookie}, length: ${Array.isArray(zaloConfig.cookie) ? zaloConfig.cookie.length : zaloConfig.cookie?.length || 0}`);
    console.log(`üîÑ Converted cookie type: ${typeof convertedCookie}, length: ${Array.isArray(convertedCookie) ? convertedCookie.length : convertedCookie?.length || 0}`);
    
    // Kh√¥ng c·∫ßn g·ªçi login() n·ªØa v√¨ ƒë√£ c√≥ cookie valid
    const api = await zalo.login();

    // B·∫Øt ƒë·∫ßu l·∫Øng nghe s·ª± ki·ªán
    api.listener.start();

    console.log(`üì° B·∫Øt ƒë·∫ßu t√¨m ki·∫øm ng∆∞·ªùi d√πng...`);
    
    // T√¨m ng∆∞·ªùi d√πng qua s·ªë ƒëi·ªán tho·∫°i
    const user = await api.findUser(phoneNumber);

    console.log(`‚úÖ T√¨m ki·∫øm ng∆∞·ªùi d√πng th√†nh c√¥ng: ${user ? 'T√¨m th·∫•y' : 'Kh√¥ng t√¨m th·∫•y'}`);

    return NextResponse.json({
      success: true,
      user: user,
      phoneNumber: phoneNumber,
      configInfo: {
        configId: zaloConfig._id,
        configName: zaloConfig.name,
        lastUsed: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('Find user error:', error);
    
    // Ki·ªÉm tra n·∫øu l·ªói li√™n quan ƒë·∫øn sharp
    if (error.message && error.message.includes('sharp')) {
      return NextResponse.json(
        { 
          error: 'L·ªói th∆∞ vi·ªán Sharp. Vui l√≤ng c√†i ƒë·∫∑t l·∫°i: npm install --include=optional sharp',
          details: 'Sharp module kh√¥ng th·ªÉ load tr√™n Windows. H√£y th·ª≠ c√†i ƒë·∫∑t l·∫°i.'
        },
        { status: 500 }
      );
    }

    // Ki·ªÉm tra l·ªói authentication
    if (error.message && error.message.includes('cookie') || error.message.includes('auth')) {
      return NextResponse.json(
        { 
          error: 'Cookie ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. Vui l√≤ng login QR l·∫°i.',
          details: error.message,
          solution: 'G·ªçi l·∫°i API /api/zalo/login-qr ƒë·ªÉ l·∫•y cookie m·ªõi'
        },
        { status: 401 }
      );
    }
    
    return NextResponse.json(
      { 
        error: 'Failed to find user', 
        details: error.message,
        phoneNumber: phoneNumber,
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}
