import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/db/mongodb';
import ZaloConfig from '@/models/ZaloConfig';

export async function POST(request: NextRequest) {
  try {
    const { userId, configId } = await request.json();

    if (!userId && !configId) {
      return NextResponse.json(
        { error: 'Thi·∫øu th√¥ng tin: c·∫ßn userId ho·∫∑c configId' },
        { status: 400 }
      );
    }

    // K·∫øt n·ªëi database
    await connectDB();

    // T√¨m Zalo config
    let zaloConfig;
    if (configId) {
      zaloConfig = await ZaloConfig.findById(configId);
    } else {
      zaloConfig = await ZaloConfig.findOne({ 
        userId, 
        isActive: true 
      }).sort({ createdAt: -1 }); // L·∫•y config m·ªõi nh·∫•t
    }

    if (!zaloConfig) {
      return NextResponse.json(
        { 
          error: 'Kh√¥ng t√¨m th·∫•y Zalo config. Vui l√≤ng login QR tr∆∞·ªõc.',
          details: 'Ch∆∞a c√≥ cookie ho·∫∑c config ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
        },
        { status: 404 }
      );
    }

    console.log(`üîç S·ª≠ d·ª•ng Zalo config: ${zaloConfig.name} (ID: ${zaloConfig._id})`);
    console.log(`üç™ Cookie length: ${zaloConfig.cookie?.length || 0} characters`);
    console.log(`üì± IMEI: ${zaloConfig.imei}`);
    console.log(`üåê User Agent: ${zaloConfig.userAgent}`);

    // S·ª≠ d·ª•ng dynamic import ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ v·ªõi sharp tr√™n Windows
    let Zalo;
    try {
      const zcaModule = await import('zca-js-16');
      Zalo = zcaModule.Zalo;
    } catch (importError) {
      console.error('Failed to import zca-js-16:', importError);
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ load th∆∞ vi·ªán Zalo. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t.' },
        { status: 500 }
      );
    }

    // T·∫°o instance Zalo v·ªõi credentials ƒë√£ c√≥
    const zalo = new Zalo({
      cookie: zaloConfig.cookie,
      imei: zaloConfig.imei,
      userAgent: zaloConfig.userAgent
    });

    console.log(`üöÄ Kh·ªüi t·∫°o Zalo instance v·ªõi config c√≥ s·∫µn`);
    
    // Kh√¥ng c·∫ßn g·ªçi login() n·ªØa v√¨ ƒë√£ c√≥ cookie valid
    const api = await zalo.login();

    // B·∫Øt ƒë·∫ßu l·∫Øng nghe s·ª± ki·ªán
    api.listener.start();

    console.log(`üì° B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch b·∫°n b√®...`);
    
    // L·∫•y danh s√°ch b·∫°n b√®
    const friends = await api.getAllFriends();

    console.log(`‚úÖ L·∫•y danh s√°ch b·∫°n b√® th√†nh c√¥ng: ${Array.isArray(friends) ? friends.length : 'N/A'} b·∫°n b√®`);

    return NextResponse.json({
      success: true,
      friends: friends,
      configInfo: {
        configId: zaloConfig._id,
        configName: zaloConfig.name,
        lastUsed: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('Get friends error:', error);
    
    // Ki·ªÉm tra n·∫øu l·ªói li√™n quan ƒë·∫øn sharp
    if (error.message && error.message.includes('sharp')) {
      return NextResponse.json(
        { 
          error: 'L·ªói th∆∞ vi·ªán Sharp. Vui l√≤ng c√†i ƒë·∫∑t l·∫°i: npm install --include=optional sharp',
          details: 'Sharp module kh√¥ng th·ªÉ load tr√™n Windows. H√£y th·ª≠ c√†i ƒë·∫∑t l·∫°i.'
        },
        { status: 500 }
      );
    }

    // Ki·ªÉm tra l·ªói authentication
    if (error.message && error.message.includes('cookie') || error.message.includes('auth')) {
      return NextResponse.json(
        { 
          error: 'Cookie ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. Vui l√≤ng login QR l·∫°i.',
          details: error.message,
          solution: 'G·ªçi l·∫°i API /api/zalo/login-qr ƒë·ªÉ l·∫•y cookie m·ªõi'
        },
        { status: 401 }
      );
    }
    
    return NextResponse.json(
      { 
        error: 'Failed to get friends', 
        details: error.message,
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}
