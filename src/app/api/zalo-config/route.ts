import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/db/mongodb';
import ZaloConfig from '@/models/ZaloConfig';
import { withAuth, AuthenticatedRequest } from '@/middleware/auth';

// GET - L·∫•y danh s√°ch c·∫•u h√¨nh Zalo c·ªßa user
export async function GET(request: NextRequest) {
  return withAuth(async (req: AuthenticatedRequest) => {
    try {
      await connectDB();
      
      if (!req.user) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }
      
      const configs = await ZaloConfig.find({ 
        userId: req.user.userId,
        isActive: true 
      }).sort({ createdAt: -1 });
      
      return NextResponse.json({
        success: true,
        configs
      });
      
    } catch (error: any) {
      console.error('Get Zalo configs error:', error);
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch c·∫•u h√¨nh', details: error.message },
        { status: 500 }
      );
    }
  })(request);
}

// POST - T·∫°o c·∫•u h√¨nh Zalo m·ªõi
export async function POST(request: NextRequest) {
  return withAuth(async (req: AuthenticatedRequest) => {
    try {
      await connectDB();
      
      if (!req.user) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }
      
      const { name, cookie, imei, userAgent, proxy } = await request.json();
      
      // Validation
      if (!name || !cookie || !imei || !userAgent) {
        return NextResponse.json(
          { error: 'T√™n, cookie, IMEI v√† User Agent l√† b·∫Øt bu·ªôc' },
          { status: 400 }
        );
      }
      
      // X·ª≠ l√Ω cookie format - l∆∞u cookie g·ªëc ƒë·ªÉ zca-js-16 c√≥ th·ªÉ s·ª≠ d·ª•ng
      let cookieToSave = cookie; // L∆∞u cookie g·ªëc thay v√¨ convert
      
      // Log ƒë·ªÉ debug
      console.log('Cookie processing:', {
        originalType: typeof cookie,
        isArray: Array.isArray(cookie),
        finalFormat: typeof cookieToSave,
        finalLength: Array.isArray(cookieToSave) ? cookieToSave.length : cookieToSave?.length || 0
      });
      
      // Ki·ªÉm tra t√™n ƒë√£ t·ªìn t·∫°i
      const existingConfig = await ZaloConfig.findOne({
        userId: req.user.userId,
        name: name
      });
      
      if (existingConfig) {
        return NextResponse.json(
          { error: 'T√™n c·∫•u h√¨nh ƒë√£ t·ªìn t·∫°i' },
          { status: 409 }
        );
      }
      
      // Deactivate t·∫•t c·∫£ config c≈© c·ªßa user n√†y tr∆∞·ªõc khi t·∫°o m·ªõi
      try {
        console.log(`üîÑ Deactivating t·∫•t c·∫£ config c≈© c·ªßa user ${req.user.userId}...`);
        const deactivateResult = await ZaloConfig.updateMany(
          { userId: req.user.userId },
          { $set: { isActive: false } }
        );
        console.log(`‚úÖ ƒê√£ deactivate ${deactivateResult.modifiedCount} config c≈©`);
      } catch (deactivateErr) {
        console.log(`‚ö†Ô∏è L·ªói khi deactivate config c≈©: ${(deactivateErr as any)?.message}`, 'warn');
        // Ti·∫øp t·ª•c t·∫°o config m·ªõi ngay c·∫£ khi deactivate th·∫•t b·∫°i
      }
      
      // T·∫°o c·∫•u h√¨nh m·ªõi
      const config = new ZaloConfig({
        userId: req.user.userId,
        name,
        cookie: cookieToSave,
        imei,
        userAgent,
        proxy: proxy || undefined,
        isActive: true // ƒê·∫£m b·∫£o config m·ªõi l√† active
      });
      
      await config.save();
      
      return NextResponse.json({
        success: true,
        message: 'T·∫°o c·∫•u h√¨nh th√†nh c√¥ng',
        config: {
          ...config.toObject(),
          cookieFormat: 'string',
          cookieProcessed: true
        }
      });
      
    } catch (error: any) {
      console.error('Create Zalo config error:', error);
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ t·∫°o c·∫•u h√¨nh', details: error.message },
        { status: 500 }
      );
    }
  })(request);
}

// PUT - C·∫≠p nh·∫≠t c·∫•u h√¨nh Zalo
export async function PUT(request: NextRequest) {
  return withAuth(async (req: AuthenticatedRequest) => {
    try {
      await connectDB();
      
      if (!req.user) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }
      
      const { id, name, cookie, imei, userAgent, proxy, isActive } = await request.json();
      
      if (!id) {
        return NextResponse.json(
          { error: 'ID c·∫•u h√¨nh l√† b·∫Øt bu·ªôc' },
          { status: 400 }
        );
      }
      
      // X·ª≠ l√Ω cookie format - ƒë·∫£m b·∫£o lu√¥n l∆∞u d∆∞·ªõi d·∫°ng string
      let cookieToSave = '';
      
      if (Array.isArray(cookie)) {
        // N·∫øu cookie l√† array, chuy·ªÉn th√†nh string format ƒë·ªÉ l∆∞u
        cookieToSave = cookie
          .map(c => `${c.name}=${c.value}`)
          .join('; ');
      } else if (typeof cookie === 'string') {
        // N·∫øu cookie ƒë√£ l√† string, ki·ªÉm tra xem c√≥ ph·∫£i JSON string kh√¥ng
        if (cookie.trim().startsWith('[')) {
          try {
            const cookieArray = JSON.parse(cookie);
            if (Array.isArray(cookieArray)) {
              // N·∫øu l√† JSON string ch·ª©a array, convert th√†nh string format
              cookieToSave = cookieArray
                .map(c => `${c.name}=${c.value}`)
                .join('; ');
            } else {
              // N·∫øu parse ra kh√¥ng ph·∫£i array, gi·ªØ nguy√™n
              cookieToSave = cookie;
            }
          } catch (parseError) {
            console.error('Error parsing cookie JSON string:', parseError);
            // N·∫øu parse l·ªói, gi·ªØ nguy√™n cookie g·ªëc
            cookieToSave = cookie;
          }
        } else {
          // Cookie ƒë√£ l√† string format ƒë√∫ng
          cookieToSave = cookie;
        }
      } else {
        // N·∫øu cookie kh√¥ng ph·∫£i array c≈©ng kh√¥ng ph·∫£i string, tr·∫£ v·ªÅ l·ªói
        return NextResponse.json(
          { error: 'Cookie kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Ph·∫£i l√† array ho·∫∑c string.' },
          { status: 400 }
        );
      }

      // Log ƒë·ªÉ debug
      console.log('Cookie processing (PUT):', {
        originalType: typeof cookie,
        isArray: Array.isArray(cookie),
        finalFormat: 'string',
        finalLength: cookieToSave.length
      });
      
      // N·∫øu ƒëang set config n√†y th√†nh active, deactivate t·∫•t c·∫£ config kh√°c
      if (isActive === true) {
        try {
          console.log(`üîÑ Deactivating t·∫•t c·∫£ config kh√°c c·ªßa user ${req.user.userId}...`);
          const deactivateResult = await ZaloConfig.updateMany(
            { userId: req.user.userId, _id: { $ne: id } },
            { $set: { isActive: false } }
          );
          console.log(`‚úÖ ƒê√£ deactivate ${deactivateResult.modifiedCount} config kh√°c`);
        } catch (deactivateErr) {
          console.log(`‚ö†Ô∏è L·ªói khi deactivate config kh√°c: ${(deactivateErr as any)?.message}`, 'warn');
        }
      }
      
      // T√¨m v√† c·∫≠p nh·∫≠t c·∫•u h√¨nh
      const config = await ZaloConfig.findOneAndUpdate(
        { _id: id, userId: req.user.userId },
        {
          name,
          cookie: cookieToSave,
          imei,
          userAgent,
          proxy: proxy || undefined,
          isActive: isActive !== undefined ? isActive : true
        },
        { new: true, runValidators: true }
      );
      
      if (!config) {
        return NextResponse.json(
          { error: 'Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh' },
          { status: 404 }
        );
      }
      
      return NextResponse.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t c·∫•u h√¨nh th√†nh c√¥ng',
        config: {
          ...config.toObject(),
          cookieFormat: 'string',
          cookieProcessed: true
        }
      });
      
    } catch (error: any) {
      console.error('Update Zalo config error:', error);
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c·∫•u h√¨nh', details: error.message },
        { status: 500 }
      );
    }
  })(request);
}

// DELETE - X√≥a c·∫•u h√¨nh Zalo
export async function DELETE(request: NextRequest) {
  return withAuth(async (req: AuthenticatedRequest) => {
    try {
      await connectDB();
      
      if (!req.user) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }
      
      const { searchParams } = new URL(request.url);
      const id = searchParams.get('id');
      
      if (!id) {
        return NextResponse.json(
          { error: 'ID c·∫•u h√¨nh l√† b·∫Øt bu·ªôc' },
          { status: 400 }
        );
      }
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i config cu·ªëi c√πng kh√¥ng
      const activeConfigs = await ZaloConfig.countDocuments({
        userId: req.user.userId,
        isActive: true
      });
      
      if (activeConfigs <= 1) {
        return NextResponse.json(
          { error: 'Kh√¥ng th·ªÉ x√≥a config cu·ªëi c√πng. M·ªói user ph·∫£i c√≥ √≠t nh·∫•t 1 config.' },
          { status: 400 }
        );
      }
      
      // X√≥a c·∫•u h√¨nh (soft delete)
      const config = await ZaloConfig.findOneAndUpdate(
        { _id: id, userId: req.user.userId },
        { isActive: false },
        { new: true }
      );
      
      if (!config) {
        return NextResponse.json(
          { error: 'Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh' },
          { status: 404 }
        );
      }
      
      return NextResponse.json({
        success: true,
        message: 'X√≥a c·∫•u h√¨nh th√†nh c√¥ng'
      });
      
    } catch (error: any) {
      console.error('Delete Zalo config error:', error);
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ x√≥a c·∫•u h√¨nh', details: error.message },
        { status: 500 }
      );
    }
  })(request);
}
